#!/bin/ksh
# update-from-src - update an OpenBSD-based system from source
# (c) 2014 Somasis <somasis@cryptolab.net> - MIT License
#
# by default this script is configured for a Bitrig system
# thus, it uses git. it can very easily be customized for a
# vanilla OpenBSD system, though.
#
make_opts="-j2"
arch=$(machine)
os=$(sysctl -n kern.ostype)
ver=$(sysctl -n kern.osrelease)
fullver=$(sysctl -n kern.version | head -n1)
me=$(basename "$0")

get_sources() {
    echo "getting latest sources..."
    pull_sources
    echo
    echo "we're currently running $current_rev, our pull got us $future_rev."
    echo "commit message for $future_rev:"
    echo "$commit_msg"
    echo
}

pull_sources() {
    # default for bitrig
    current_rev=$(echo $(sysctl -n kern.version | tail -n2 | head -n1) )
    current_rev=$(echo "$current_rev" | cut -d':' -f1):$(echo "$current_rev" | cut -d':' -f2 | cut -c -7)
    cd /usr/src && git pull -f --all || error "failed to pull git sources"
    future_rev=$(git rev-parse --abbrev-ref HEAD):$(git rev-parse HEAD | cut -c -7)
    commit_msg=$(git log --format=%B -n1)
}

make() {
    command make $make_opts "$@"
    return $?
}

error() {
    echo "error: $@ (errcode: $?) (pwd: $PWD)"
    exit $?
}

backup_kernel() {
    for kernel in $kernels;do
        echo "backing up old kernel (old: $kernel) (new location: $kernel.bk)"
        cp "$kernel" "$kernel.bk" || error "failed to backup old kernel (tried \`cp \"$kernel\" \"$kernel.bk\"\`))"
    done
}

update_kernel() {
    if ([ "$1" = "prompt" ] && [ "$2" = "before" ]);then
        printf "are you sure you want to "
        while ([ "x$kernel_update" != "xy" ] && [ "x$kernel_update" != "xn" ]);do
            printf "update the kernel? [y/n] "
            read kernel_update
            kernel_update=$(echo "$kernel_update" | tr '[A-Z]' '[a-z]' | cut -c1)
            if [ "x$kernel_update" = "xn" ];then
                error "you didn't want to update the kernel"
            fi
        done
    fi
    echo "updating the kernel..."
    cd "/usr/src/sys/arch/$arch/conf/" || error "/usr/src/sys/arch/$arch/conf/ doesn't exist"
    echo "loading GENERIC config..."
    config GENERIC || error "failed to load GENERIC config"
    echo "beginning compilation..."
    cd ../compile/GENERIC
    echo "\`make clean\`..."
    make clean || error "failed to \`make clean\`"
    echo "\`make\`..."
    make || error "failed to \`make\` kernel sources"
    backup_kernel
    echo "we finished compiling, so now we will install the kernel"
    make install || error "failed to \`make install\` new compiled kernel"
    if [ "$1" == "prompt" ];then
        while ([ "x$reboot" != "xy" ] && [ "$reboot" != "xn" ]);do
            printf "reboot into new kernel? [Y/n] "
            read reboot
            reboot=$(echo "$reboot" | tr 'A-Z' 'a-z' | cut -c1)
            if ([ "x$reboot" = "xy" ] || [ "x$reboot" = "x" ]);then
                echo "rebooting. to skip kernel compilation, pass no-kernel as an arg on next run."
                reboot
            elif [ "x$reboot" = "xn" ];then
                break
            fi
        done
    else
        echo "you should reboot into the new kernel now before updating anything else."
    fi
}

update_userland() {
    if [ "$1" == "prompt" ];then
        while ([ "x$userland_begin" != "xy" ] && [ "x$userland_begin" != "xn" ]);do
            printf "begin updating userland? [y/N] "
            read userland_begin
            userland_begin=$(echo "$userland_begin" | tr 'A-Z' 'a-z' | cut -c1)
            [ "x$userland_begin" = "xn" ] && exit
        done
    fi
    echo "updating userland."
    echo "cleaning out /usr/obj..."
    rm -rf /usr/obj/* || error "failed to clean /usr/obj"
    echo "initalizing /usr/obj..."
    cd /usr/src && make obj || error "failed to initalize /usr/obj"
    echo "creating /etc directories..."
    cd /usr/src/etc && DESTDIR=/ make distrib-dirs || error "failed to make /etc dirs"
    echo
    echo "alright, this is it. updating userland."
    cd /usr/src && make build || error "failed to build userland sources"
    echo "userland updated successfully."
}

read_news() {
    printf "checking UPDATING for news..."
    if [ "$(sha1 /usr/src/UPDATING)" != "$oldsum" ];then
        echo " UPDATING has been revised, please read it now"
    else
        echo " nothing new, should be safe to update blindly."
        echo "you should still look at the latest commits and such"
        echo "to make sure nothing you use is affected in any way."
        echo
    fi

    while [ "x$read" != "xn" ];do
        printf "read UPDATING${again}? [Y/n] "
        read read
        read=$(echo "$read" | tr 'A-Z' 'a-z' | cut -c1)
        if ([ "x$read" = "xy" ] || [ "x$read" = "x" ]);then
            less "/usr/src/UPDATING"
            again=' again'
        fi
    done
    echo "writing checksum to /var/tmp/update-from-src.sum..."
    echo "$(sha1 /usr/src/UPDATING)" > /var/tmp/update-from-src.sum || error "could not save state of UPDATING"
    echo
}

show_help() {
    # TODO: write man page and remove this option after doing so
    echo "update-from-src: created by Somasis <somasis@cryptolab.net>"
    echo "usage: $me -kusr"
    echo
    echo "if ran with no arguments:"
    printf "\t- get latest revision\n"
    printf "\t- read UPDATING\n"
    printf "\t- update kernel\n"
    printf "\t- prompt for reboot\n"
    printf "\t- update userland\n"
    echo
    echo "this script will automatically update your OpenBSD system"
    echo "by compiling it from source located in /usr/src."
    echo "in addition, it does work of checking UPDATING for changes"
    echo "as well as reading commit messages."
    echo
    echo "please remember, you are using this under your own will."
    echo "i have done my best to test this on my own system, and it"
    echo "well and is suitable for my own usage. i can not guarantee"
    echo "that it works perfect for you; this is done at your own risk."
    echo
    echo "(c) 2014 Somasis, MIT license."
    echo "report issues/send patches to http://github.com/Somasis/scripts"
}

if [ "$(id -u)" -ne 0 ];then
    sudo -p "$me must be ran as root, input \`sudo\` password: " -- "$0" "$@"
    exit "$?"
fi

for arg in $(getopt krsuh "$@");do
    [ "$#" -eq 0 ] && break
    case "$arg" in
        -k)
        update_kernel prompt before
        ;;
        -u)
        update_userland
        ;;
        -s)
        get_sources
        ;;
        -n)
        read_news
        ;;
        -h)
        show_help
        ;;
        --)
        exit 0 # end of arg parsing
        ;;
        *)
        echo "$me: unknown option -- $arg"
        show_help
        exit 1
        ;;
    esac
done

show_help
echo "update-from-src: created by Somasis <somasis@cryptolab.net>"
echo
echo "current version: $os $ver ($fullver)"
echo "architecture: $arch"
echo "kernel configuration: /usr/src/sys/arch/$arch/conf/GENERIC"
[ -f /var/tmp/update-from-src.sum ] && oldsum=$(cat /var/tmp/update-from-src.sum)

get_sources
read_news
printf "now, with all this in mind, would you like to "
while ([ "x$begin" != "xy" ] && [ "x$begin" != "xn" ]);do
    printf "begin updating? [y/n] "
    read begin
    begin=$(echo "$begin" | tr 'A-Z' 'a-z' | cut -c1)
    #printf '\n'
    [ "x$begin" = "xn" ] && error "you didn't want to update"
done
sleep 1

update_kernel prompt
update_userland prompt && exit
