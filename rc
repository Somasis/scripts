#!/bin/bash
# rc - enable/disable/start/stop/etc daemons, Debian/Ubuntu systems only
# (c) 2014 Somasis <https://github.com/somasis> - MIT License

## Settings
if [[ "$UID" -ne 0 || -z "$SSH_CONNECTION" ]];then # don't delete this or you'll have issues with ssh mode
    # these daemons don't show in the `list`
    excluded_daemons=( "systemd-.*" "user@.*" "getty@.*" )
fi # don't delete this either


## Script begins here
script_arguments="[--host=ssh-enabled-host.com | -h ssh-enabled-host.com] (start|stop|restart|enable|disable|[list]|help)"
script_description="A script to make managing of daemons much easier.\nCurrently for Upstart/SysV, and systemd systems only."
script_credit="Written by Somasis <https://github.com/somasis>, MIT license."

SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd -P)
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

if [[ "$UID" -ne 0 ]];then # read configs

    . "$XDG_CONFIG_HOME/rc.conf" 2>/dev/null >/dev/null
fi

# bootstrap_ssh(): bootstraps the script for usage on any ssh server
#                  since we get the content of common.sh and the config
#                  without needing it on the remote host
bootstrap_ssh() {
    (cat "$SCRIPT_DIR/common.sh" 2>/dev/null
     echo
     cat "$XDG_CONFIG_HOME/rc.conf" 2>/dev/null
     cat "$SCRIPT_DIR/${0##*/}" 2>/dev/null) | ssh "$host" -- sudo bash -$- /dev/stdin "$@" 2>&1
    bootstrap_ssh_error="$?"
    exit "$bootstrap_ssh_error"
}

# list_init()
list_init() {
    if [[ ! -z "$1" ]];then
        list_daemon="$1"
    fi

    if [[ "$init_system" == @(upstart|init) ]];then
        upstart=$(service --status-all 2>&1 | cut -c2-)
        initctl=$(initctl list 2>/dev/null | sed 's/(.*)//' | cut -d'/' -f1 | while read initctl_line;do echo -e "$(echo -e $initctl_line | cut -d' ' -f2) $(echo -e $initctl_line | cut -d' ' -f1)";done)
        initctl=$(echo "$initctl" | sed -e 's/.*/ & /' -e :1 -e "s/ stop /\[ ${COLOR_BOLD_RED}STOPPED${COLOR_RESET} \] /g;t1" -e "s/ start /\[ ${COLOR_BOLD_GREEN}RUNNING${COLOR_RESET} \] /g;t1" -e 's/^ //;s/ $//')
        upstart=$(echo "$upstart" | sed -e "s/^..-... /\[ ${COLOR_BOLD_RED}STOPPED${COLOR_RESET} \] /;s/^..+.../\[ ${COLOR_BOLD_GREEN}RUNNING${COLOR_RESET} \]/;s/^..?..../\[ ${COLOR_BOLD_YELLOW}UNKNOWN${COLOR_RESET} \] /g" | grep -v '^$')
        daemon_list=$(printf "$upstart\n$initctl")
        OLDIFS="$IFS"
        IFS=$'\n'
        for daemon_in_list in $(echo "$daemon_list" | cut -d']' -f2 | cut -d' ' -f2);do
            if [[ $(echo "$daemon_list" | grep "RUNNING.*$daemon_in_list") && $(echo "$daemon_list" | grep "UNKNOWN.*$daemon_in_list") ]];then
                daemon_list=$(echo "$daemon_list" | grep -v "UNKNOWN.*$daemon_in_list" | grep -v '^$')
            fi
        done
        IFS="$OLDIFS"
        OLDIFS=
    elif [[ "$init_system" == "systemd" ]];then
        daemon_list=$(systemctl list-unit-files --type=service 2>/dev/null | while read initctl_line;do echo -e "$(echo -e $initctl_line | sed 's/.* //') $(echo -e $initctl_line | cut -d' ' -f1)";done | grep "\.service" | grep -v '@$')
        daemon_list=$(echo "$daemon_list"; (systemctl --no-legend -t service 2>/dev/null | while read systemd_line;do echo -e "$(echo -e $systemd_line | cut -d' ' -f2) $(echo -e $systemd_line | cut -d' ' -f1)";done))
        daemon_list=$(echo "$daemon_list" |
            sed  -e     "s/^stopped/\[ ${COLOR_BOLD_RED}STOPPED${COLOR_RESET} \]/" \
                 -e      "s/^static/\[ ${COLOR_BOLD_RED}STOPPED${COLOR_RESET} \]/" \
                 -e    "s/^enabled/\[ ${COLOR_BOLD_BLUE}ENABLED${COLOR_RESET} \]/" \
                 -e "s/^disabled/\[ ${COLOR_BOLD_YELLOW}DISABLE${COLOR_RESET} \]/" \
                 -e    "s/^loaded/\[ ${COLOR_BOLD_GREEN}RUNNING${COLOR_RESET} \]/" \
                 -e   "s/@$//" -e "s/\.service$//"
        )
        daemon_list=$(for exclude_daemon in $excluded_daemons[@];do echo "$daemon_list" | grep -v " $exclude_daemon$";done)
    fi
    if [[ -z "$list_daemon" ]];then
        echo "$daemon_list" | grep --color=never "DISABLED" | sort -ud
        echo "$daemon_list" | grep --color=never "STOPPED" | sort -ud
        echo "$daemon_list" | grep --color=never "UNKNOWN" | sort -ud
        echo "$daemon_list" | grep --color=never "ENABLED" | sort -ud
        echo "$daemon_list" | grep --color=never "RUNNING" | sort -ud
    else
        echo "$daemon_list" | grep --color=never " $list_daemon$" | tail -n1 || exit "$?"
    fi
}

do_action() {
    if [[ ! -z "$1" ]];then
        action="$do_action"
        old_action="$action"
    fi

    if [[ "$action" == "enable" ]];then
        if [[ "$init_system" == @(upstart|init) ]];then
            update-rc.d "$daemon" enable 2>/dev/null
        elif [[ "$init_system" == "systemd" ]];then
            systemctl enable "$daemon"
        fi
    elif [[ "$action" == "disable" ]];then
        if [[ "$init_system" == @(upstart|init) ]];then
            update-rc.d "$daemon" disable 2>/dev/null
        elif [[ "$init_system" == "systemd" ]];then
            systemctl disable "$daemon"
        fi
    elif [[ "$action" == "start" ]];then
        if [[ "$init_system" == @(upstart|init) ]];then
            "/etc/init.d/$daemon" "start" 2>/dev/null
        elif [[ "$init_system" == "systemd" ]];then
            systemctl start "$daemon"
        fi
    elif [[ "$action" == "stop" ]];then
        if [[ "$init_system" == @(upstart|init) ]];then
            "/etc/init.d/$daemon" "stop" 2>/dev/null
        elif [[ "$init_system" == "systemd" ]];then
            systemctl stop "$daemon"
        fi
    elif [[ "$action" == "restart" ]];then
        old_action="$action"
        action="stop"
        do_action
        action="start"
        do_action
        action="$old_action"
        old_action=
    elif [[ "$action" == "list" || -z "$action" ]];then
        list_init
    elif [[ "$action" == "help" ]];then
        show_help 0
    else
        if [[ "$init_system" == @(upstart|init) ]];then
            if [[ -f "/etc/init.d/$daemon" ]];then
                "/etc/init.d/$daemon" "$action"
            else
                service "$daemon" "$action"
            fi
        elif [[ "$init_system" == "systemd" ]];then
            systemctl "$action" "$daemon"
        fi

    fi
    action="${action:-$old_action}"
    old_action=
}

if [[ "$1" == "--host="* ]];then
    host="$1"
    host=$(echo "$host" | cut -d'=' -f2-)
    shift
    bootstrap_ssh
elif [[ "$1" == "-h" ]];then
    host="$2"
    shift;shift
    bootstrap_ssh
fi

if [[ -z "$SSH_CONNECTION" ]];then
    . "$SCRIPT_DIR/common.sh" 2>/dev/null >/dev/null
fi

init_system=$(</proc/1/comm)

action="$1"
action=$(echo "$action" | tr '[A-Z]' '[a-z]')

if [[ "$UID" -ne 0 ]]; then
    exec sudo bash -$- "$SCRIPT_DIR/${0##*/}" "$action" "$@"
    exit_code="$?"
    exit "$exit_code"
fi

if [[ "$init_system" == "systemd" ]];then
    systemctl daemon-reload # make sure systemctl output is up-to-date
fi

shift
shift
if [[ -z "$@" ]];then
    do_action
else
    for daemon in $@;do
        do_action
        list_init "$daemon"
        shift
    done
fi
