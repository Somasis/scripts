#!/usr/bin/env bash
# mpd-alarm -- A script to turn the Music Player Daemon into an alarm
# (c) 2014 Kylie "Somasis" McClain <somasissounds@gmail.com> - MIT License
# https://github.com/somasis/scripts/

MPD_HOST="localhost" # host for mpc to use to connect
MPD_PORT=6600 # port mpd server is on, 6600 is default

use_repeat=true # put mpd server into repeat mode?
use_playlist=true # use a playlist for alarm music, or just use entire library
alarm_playlist="Alarm" # name of alarm playlist
previous_playlist="Previous" # name of playlist before alarm

sound_system="pulseaudio" # alsa, oss, or pulseaudio
pulse_output=$(echo $(pactl list sinks short | head -n1) | cut -d' ' -f1)
alsa_channel="Master"
oss_output="vmix0-outvol"

common_location='$SCRIPT_DIR/common.sh'
if [[ -z "$config_location" ]];then
    config_location='$XDG_CONFIG_HOME/mpd-alarm.conf'
fi

## Script begins here

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
script_description="A script to turn the Music Player Daemon into an alarm"
script_credit="Written by Kylie "Somasis" McClain <https://github.com/somasis>, MIT license."
error_bootstrap="Error: Failed to bootstrap the script with the common.sh functions, please make sure it is in the script directory ($SCRIPT_DIR)"

error_bootstrap() {
    echo "$error_bootstrap"; exit 10
}

# okay, now that we know the dir, find out the variables in the $locations
SCRIPT_DIR=$(cd "$(dirname "$0")"; pwd)
eval "common_location=$common_location"
eval "config_location=$config_location"
. "$config_location" 2>&1 >/dev/null

# Bootstrap common.sh script if it's not accessable
if [[ ! -f "$common_location" ]];then
    wget -qO "$common_location" "$protocol://raw.githubusercontent.com/somasis/scripts/master/common.sh" || error_bootstrap
    echo "Bootstrapped common.sh functions, script will continue like normal."
    . "$common_location" 2>&1 >/dev/null || error_bootstrap
else
    . "$common_location" 2>&1 >/dev/null || error_bootstrap
fi

show_help

echo "Host: $MPD_HOST"
echo "Alarm playlist: $alarm_playlist"
echo "Previous: $previous_playlist"
if [[ "$sound_system" == "pulseaudio" ]];then
    echo "PulseAudio output: $pulse_output"
elif [[ "$sound_system" == "alsa" ]];then
    echo "ALSA channel: $alsa_channel"
elif [[ "$sound_system" == "oss" ]];then
    echo "OSS output: $oss_output"
else
    show_help 2 "Unknown sound system."
fi

mpc() {
    MPD_HOST="${MPD_HOST:-localhost}"
    MPD_PORT="${MPD_PORT:-6600}"
    command mpc -h "$MPD_HOST" -p "$MPD_PORT" "$@"
}

if [[ -z "$(pgrep mpd)" ]];then
    echo "MPD isn't running, starting it..."
    mpd
fi

echo "Saving current playlist to \"$previous_playlist\"..."
mpc rm "$previous_playlist"
mpc save "$previous_playlist"
echo "Setting volume to 100%..."
mpc volume 100
if [[ "$sound_system" == "pulseaudio" ]];then
    pactl set-sink-mute "$pulse_output" false
    pactl set-sink-volume "$pulse_output" 100%
elif [[ "$sound_system" == "alsa" ]];then
    amixer set "$alsa_channel" on
    amixer set "$alsa_channel" 100%
elif [[ "$sound_system" == "oss" ]];then
    ossmix "$oss_output" 100
fi

if [[ "$use_playlist" == true ]];then
    echo "Loading alarm playlist \"$alarm_playlist\"..."
    mpc clear
    mpc load "$alarm_playlist"
else
    echo "Adding entire library and shuffling..."
    mpc clear
    mpc listall | mpc add
    mpc shuffle
fi

[[ "$use_repeat" == true ]] && mpc repeat on
echo "Playing..."
mpc play
echo
echo "I hope you slept well :)"
