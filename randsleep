#!/bin/sh
# randsleep - sleep for a random amount of time

# random(): try to generate a random number. we don't care about it being cryptographically secure.
random() {
    # we check ${RANDOM} a second time to make sure it's actually the shell's RANDOM
    [ -n "${RANDOM}" ] && ! [ "${RANDOM}" = "${RANDOM}" ] && printf '%s\n' "${RANDOM:0:2}" && return
    [ -r /dev/urandom ] && tr -cd '0-9' < /dev/urandom | dd bs=1 count=2 2>/dev/null && return
    awk 'BEGIN{srand(); printf "%d\n",(rand() * 99)}'
    
    return 1
}

time=$(random)
[ "$?" -ne 0 ] && printf '%s: %s\n' "${0##*/}" "not sure how to generate a random number" >&2 && exit 127

verbose=false
if [ "$1" = "-v" ];then
    verbose=true
    shift
fi

case "${1}" in
    ''|s|seconds)   time="${time}" ;;
    m|minutes)      time=$(( ${time} * 60 )) ;;
    h|hours)        time=$(( ${time} * 3600 )) ;;
    d|days)         time=$(( ${time} * 86400 ));;
    *)
        printf '%s\n' >&2 \
            "randsleep [-v] [unit] [maximum time] [minimum time]" \
            '' \
            'unit: s[econds], m[inutes], h[ours], d[ays]' \
            'if unspecified, the default unit is seconds'
        exit 1
    ;;
esac

[ -n "${2}" ] && max="${2}" && time=$(( time % max ))
[ -n "${3}" ] && min="${3}" && time=$(( time + min ))

"${verbose}" && printf '%s: sleeping for %s seconds\n' "${0##*/}" "${time}" >&2
exec sleep "${time}"
