#!/bin/sh
# open - xdg-open(1) replacement using {protocol,MIME,extension}-based configuration

: "${XDG_CONFIG_HOME:=~/.config}"

# Set some common defaults.
: "${BROWSER:=firefox &}"
: "${IMAGE_VIEWER:=feh}"
: "${MAIL_CLIENT:=terminal sendmail}"
: "${EDITOR:=terminal ${EDITOR:-vi}}"

edo() {
    "$@"
}

edo_nohup() {
    nohup -- "$@" >/dev/null 2>&1
}

run() {
    value="$1"; shift
    # shellcheck disable=SC2046,SC2059
    #       SC2046: don't complain about word splitting, we want that
    #       SC2059: don't complain about using variables in printf, we want that!
    case "${value}" in
        *'%s'*'&') edo_nohup $(printf "${value% &}" "$@") & ;;
        *'&') edo_nohup "${value% &}" "$@" & ;;
        *'%s'*) edo $(printf "${value}" "$@") ;;
        *) edo ${value} "$@" ;;
    esac
}

extension() {
    while [ $# -gt 0 ]; do
        extension=$(printf '%s\n' "$1" | sed -E 's/^.*\.//; s/./\L&/g')

        if [ -e "${XDG_CONFIG_HOME}/open/extension/${extension}" ]; then
            run "$(cat "${XDG_CONFIG_HOME}/open/extension/${extension}")" "$1"
        else
            printf 'warning: no handler for "%s" extension used in "%s"\n' "${extension}" "$1" >&2
            return 1
        fi

        shift
    done
}

protocol() {
    while [ $# -gt 0 ]; do
        # Ensure all protocols are lowercase.
        protocol=$(printf '%s\n' "$1" | sed 's#:.*##; s/\./\L&/')

        if [ -e "${XDG_CONFIG_HOME}/open/protocol/${protocol}" ]; then
            run "$(cat "${XDG_CONFIG_HOME}/open/protocol/${protocol}")" "$1"
        else
            printf 'warning: no handler for "%s" protocol used in "%s"\n' "${protocol}" "$1" >&2
            return 1
        fi
        shift
    done
}

mime() {
    while [ $# -gt 0 ]; do
        # This check is needed because otherwise file(1), according to POSIX, just reports
        # filesystem errors on stdout(!) rather than failing
        [ -e "$1" ] || {
            printf 'error: file "%s" does not exist\n' "$1" >&2
            return 1
        }

        # -i for printing mimetype only
        # -L for following symlinks
        #       POSIXLY_CORRECT was once used here for same effect, but that is,
        #       ironically enough, not portable across file(1) implementations.
        #       POSIX file doesn't specify -L, but it is used across both OpenBSD's
        #       file(1) implementation, and Ian Darwin's file(1) (the most common).
        mime=$(file -iL "$1" 2>/dev/null | sed 's/.*: *//; s/; .*//')
        parent="${mime%%/*}"
        child="${mime#*/}"

        if [ -e "${XDG_CONFIG_HOME}/open/mime/${parent}_${child}" ]; then
            run "$(cat "${XDG_CONFIG_HOME}/open/mime/${parent}_${child}")" "$1"
        elif [ -e "${XDG_CONFIG_HOME}/open/mime/${parent}" ]; then
            run "$(cat "${XDG_CONFIG_HOME}/open/mime/${parent}")" "$1"
        else
            printf 'warning: no handler for "%s" MIME type used in "%s"\n' "${mime}" "$1" >&2
            return 1
        fi
        shift
    done
}

while [ $# -gt 0 ]; do
    match -E '^\S+:' "$1" && protocol "$1" && shift && continue
    match -E '\.\S+$' "$1" && extension "$1" && shift && continue
    mime "$1" && shift && continue

    printf 'error: not sure how to handle "%s"\n' "$1" >&2
    exit 1
done
