#!/usr/bin/env bash
# domirror - rudimentry syncing from mirrors with repositories of any type
#
# Copyright 2015 Kylie McClain <somasis@exherbo.org>
# Distributed under the terms of the ISC License
#
# Basically, this just cycles through possible `sync` URLs and tries until
# it syncs successfully, failing if none of them work.
#
# At /etc/paludis/mirrors.conf, you should have something like:
#
#   ::arbor git+https://git.exherbo.org/arbor.git git://git.exherbo.org/arbor.git
#
# And then in /etc/paludis/repositories/arbor.conf, you'd have:
#
#   sync = mirror://arbor
#
# (To make it more automatic, you could add something like...:
#
#   sync = mirror://%{repository_template_name}
#
# to your repository.template file.
#
# There's probably a way to generate a mirrors.conf based off the metadata
# in ::unavailable{,-unofficial}, but I haven't done that yet.
#
# domirror then figures out what list of urls is needed. Anything after "mirror://"
# is taken as the "category".
#
# Does this mean you could theoretically make a repository sync from both git,
# and tarballs? Yes, probably. Should you? Uh, no.
#

source "${PALUDIS_EBUILD_DIR}/echo_functions.bash"

for f in ${PALUDIS_BASHRC_FILES}; do
    . "${f}" >/dev/null 2>&1
done

for f in ${PALUDIS_SYNCERS_DIRS};do
    export PATH="${f}":"${PATH}"
done

f=

LOCAL=
MIRROR_CAT=
ARGS=

while [[ $# -gt 0 ]]; do
    case "${1}" in
        --*)
            ARGS="${ARGS} ${1}"
        ;;
        *)
            if [[ -z "${LOCAL}" ]]; then
                LOCAL="${1}"
            elif [[ -z "${MIRROR_CAT}" ]];then
                MIRROR_CAT="${1}"
            fi
        ;;
    esac
    shift
done

MIRROR_CAT=${MIRROR_CAT#*://}

for MIRROR_REMOTE in $(echo $(grep "^::${MIRROR_CAT##*/}\s" /etc/paludis/mirrors.conf | sed 's/\t/ /g') | cut -d' ' -f2- | tr ' ' '\n' | shuf);do
    MIRROR_SYNCER=do${MIRROR_REMOTE%://*}
    echo ${MIRROR_SYNCER} ${ARGS} "${LOCAL}" "${MIRROR_REMOTE}" >&2
    ${MIRROR_WRAPPER} ${MIRROR_SYNCER} ${ARGS} "${LOCAL}" "${MIRROR_REMOTE}" && exit $?
done

exit 2
